version: "3.5"
services:
  # frontend:
  #   build: ./frontend
  #   ports:
  #     - 3000:3000
  #   platform: linux/x86_64
  #   working_dir: /app-frontend
  #   depends_on:
  #     backend:
  #       condition: service_healthy
  #   # Os `healthcheck` devem garantir que a aplicação
  #   # está operacional, antes de liberar o container
  #   healthcheck:
  #     test: ["CMD", "lsof", "-t", "-i:3000"]  # Caso utilize outra porta interna para o front, altere ela aqui também
  #     timeout: 10s
  #     retries: 5
  postgres:
    restart: always
    container_name: postgres
    image: postgres:14-alpine3.15
    environment:
      # define password from root user

      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      PGDATA: /data/postgres

    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    # add healthcheck to wait for postgres to be ready
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  backend:
    restart: always
    container_name: backend
    build: ./backend
    ports:
      - 5433:5433
    working_dir: /backend
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - APP_PORT=5433
      - JWT_SECRET=jwt_secret
      - DB_USER=postgres
      - DB_PASS=postgres
      - DB_HOST=postgres
      - DB_PORT=5432

networks:
  external:
    name: backend_default
  webnet:
    driver: bridge
volumes:
  pgdata: